// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserRole {
    OWNER
    ADMIN
    USER
}

enum UserRank {
    BEGINNER
    INTERMEDIATE
    ADVANCED
    EXPERT
    MASTER
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    emailVerified         DateTime?
    image                 String?                @default("https://files.edgestore.dev/5iwpojmnomxbon5i/publicFiles/_public/b3fbf0f0-1f39-4638-8d2e-82ab601a57d3.png")
    password              String?
    role                  UserRole               @default(USER)
    accounts              Account[]
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?
    bio                   String?                @default("")
    birthday              DateTime?
    reputation            Int                    @default(0)
    rank                  UserRank               @default(BEGINNER)
    createdAt             DateTime               @default(now())
    faculty               String?                @default("SE")
    isMember              Boolean                @default(false)

    Answer Answer[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model ContactForm {
    id        String   @id @default(cuid())
    name      String
    email     String
    message   String
    createdAt DateTime @default(now())
}

model Event {
    id          String   @id @default(cuid())
    title       String
    description String
    imageUrl    String
    status      String
    location    String
    startDate   DateTime @default(now())
    endDate     DateTime @default(now())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @default(now())

    Assignment Assignment[]
}

model Assignment {
    id            String         @id @default(cuid())
    title         String
    description   String
    event         Event?         @relation(fields: [eventId], references: [id])
    eventId       String?
    questions     Question[]
    codeQuestions CodeQuestion[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @default(now())
}


model Question {
    id            String     @id @default(cuid())
    content       String
    options       String[]
    correctOption Int
    assignment    Assignment @relation(fields: [assignmentId], references: [id])
    assignmentId  String
    Answer        Answer[]
}

model CodeQuestion {
    id            String     @id @default(cuid())
    description   String
    exampleInput  String
    exampleOutput String
    constraints   String?
    assignment    Assignment @relation(fields: [assignmentId], references: [id])
    assignmentId  String
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @default(now())
}

model Answer {
    id           String    @id @default(cuid())
    user         User      @relation(fields: [userId], references: [id])
    userId       String
    question     Question? @relation(fields: [questionId], references: [id])
    questionId   String?
    codeSolution String?
    isCorrect    Boolean?
    createdAt    DateTime  @default(now())
}
